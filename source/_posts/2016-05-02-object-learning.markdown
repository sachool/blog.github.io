---
layout: post
title: "オブジェクト指向とは"
date: 2016-05-02 18:47:21 +0900
comments: true
categories: 言語 オブジェクト指向
descriptions: 
keywords: オブジェクト指向言語
author: k_yoshida
---
k_yoshidaです。オブジェクト指向の学習を行ったのでまとめます

***オブジェクト指向について学習する課題***
## オブジェクト指向とはいったいどのような物か

<!-- more -->
オブジェクト指向というのは　オブジェクト（物）の結びつきを表現します

オブジェクト指向とは主に以下の4つの考え方があります

1. クラス
1. 継承
1. ポリモーフィズム
1. カプセル化


### クラス
クラスとは,データの処理手順,データ,メソッド,プロパティなどが集まったオブジェクトです。料理のレシピみたいなもので,料理をすると食べ物ができるようにクラスを実行するとインスタンスが生成されます  

![クラスとインスタンス](/images/class_instance.png)  

### 継承
クラスを継承する事です。継承するクラスを親クラス,継承したクラスを子クラスと呼びます.子クラスは親クラスの機能を持っています。なので親クラスと子クラスは親子関係という性質を持っています。  

![継承](/images/Aclass_Bclass.png)  

### ポリモーフィズム
親クラスから子クラスに継承を行うと前記のように機能が継承されます。その継承された機能を使うかどうか,新しく機能をプログラミングしオーバーライドさせたりする事をポリモーフィズムといいます。システムの変更に柔軟に対応する事が出来ます。またオブジェクトが多様性を持つことになります。


### カプセル化
複雑なオブジェクトを簡単に見えるようにする事です。複雑だったオブジェクトを簡単に見えるようにすることで,オブジェクトを扱いやすくし,メンテナンス性を向上させる事ができます。変更したくないデータ,プロパティを隠蔽することで安全にプログラミングを行えるようになります。

### まとめ

オブジェクト指向を学習することでなぜ多くの場面でオブジェクト指向がなぜ使われるのか理解ができるようになりました。  
継承を行うことで機能の受け継ぎができ場合によってクラスを多く作らなくて済んだり,継承クラスに新たにプログラミングを行い容易に機能拡張や機能の制限ができる事ができ,容易に機能拡張,システム変更がしやすい。
カプセル化を行う事でプログラムの流れが抽象化されメンテナンス性が向上を見込めるという事がわかりました。


オブジェクト指向の考え方はここに記述した事はごく一部です。オブジェクト指向をマスターするためにはまだまだ勉強不足です。思考どおりコードを書くことはもっと難しい事なのでコードを描きつつ学習していきたいと思います。
